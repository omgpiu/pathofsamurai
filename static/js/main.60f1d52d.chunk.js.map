{"version":3,"sources":["HOC/WithAuthRedirect.tsx","SN-2-features/f1-login/l1-ui/Login.module.css","SN-2-features/f4-users/u1-ui/User/User.module.css","SN-2-features/f4-users/u1-ui/Users.module.css","SN-3-common/FormControls/FormControls.module.css","SN-2-features/f2-profile/MyPosts/Post/Post.module.css","photo/samurai-robot-head-esport-mascot-logo_160921-34-removebg-preview.png","HOC/withSuspense.tsx","SN-1-main/m2-bll/app-selectors.ts","Types/api-types.ts","SN-1-main/m3-dal/instance-api.ts","SN-2-features/f1-login/l3-dal/auth-api.ts","SN-2-features/f1-login/l3-dal/security-api.ts","SN-2-features/f1-login/l2-bll/auth-reducer.ts","SN-1-main/m2-bll/app-reducer.tsx","SN-3-common/preLoader/preLoader.tsx","SN-2-features/f8-settings/n1-ui/Settings.tsx","SN-2-features/f6-music/m1-ui/Music.tsx","SN-3-common/Page404/Page404.tsx","photo/commonAvatar.png","SN-2-features/f4-users/u1-ui/User/User.tsx","SN-2-features/f4-users/u2-bll/users-selectors.tsx","SN-2-features/f4-users/u1-ui/User/UserSearchForm.tsx","utils/object-helpers/object-helpers.tsx","SN-2-features/f4-users/u3-dal/users-api.ts","SN-2-features/f4-users/u2-bll/users-reducer.tsx","SN-3-common/Paginator/p1-ant/PaginatorAnt.tsx","SN-2-features/f4-users/u1-ui/Users.tsx","SN-2-features/f4-users/u1-ui/UsersPage.tsx","SN-2-features/f2-profile/p2-bll/profile-selectors.ts","SN-2-features/f2-profile/p3-dal/profile-api.ts","SN-2-features/f2-profile/p2-bll/profile-reducer.tsx","SN-2-features/f2-profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","SN-2-features/f2-profile/ProfileInfo/ProfileData/ProfileData.tsx","SN-2-features/f2-profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","SN-2-features/f2-profile/ProfileInfo/ProfileInfo.tsx","SN-2-features/f2-profile/MyPosts/Post/Post.tsx","SN-2-features/f2-profile/MyPosts/MyPosts.tsx","SN-2-features/f2-profile/p1-ui/ProfileContent.tsx","SN-2-features/f2-profile/p1-ui/ProfileContentContainerAPI.tsx","SN-3-common/emptyPage/emptyPage.tsx","SN-2-features/f1-login/l2-bll/auth-selectors.ts","SN-2-features/f1-login/l1-ui/l2-old-features/LoginLabel.tsx","SN-2-features/f1-login/l1-ui/Login.tsx","SN-3-common/routes/Routes.tsx","SN-3-common/Nav/Nav.tsx","SN-3-common/Header/Header.tsx","SN-1-main/m2-bll/redux-store.tsx","SN-1-main/m1-ui/App.tsx","index.tsx","SN-2-features/f3-dialogs/d2-bll/dialogs-reducer.tsx","SN-2-features/f5-chat/c3-dal/chat-api.ts","SN-2-features/f5-chat/c2-bll/chat-reducer.ts","SN-3-common/Page404/Page404.module.css","SN-2-features/f4-users/u1-ui/User/UserSearchForm.module.css","SN-2-features/f2-profile/MyPosts/MyPosts.module.css","SN-3-common/Header/Header.module.css","SN-3-common/FormControls/FormControls.tsx","SN-3-common/preLoader/preLoader.module.css","SN-2-features/f2-profile/ProfileInfo/ProfileData/ProfileData.module.css"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","restProps","to","module","exports","withSuspense","props","Suspense","fallback","ResultCodesEnum","ResultCodeForCaptcha","getIsInitialized","app","isInitialized","instance","axios","create","baseURL","withCredentials","headers","AuthAPI","get","then","res","data","post","delete","securityAPI","initialState","userId","email","login","captchaUrl","error","authActions","type","payload","getAuthUserDataTC","dispatch","a","meData","resultCode","Success","id","console","log","loginTC","loginData","CaptchaRequired","Error","getCaptchaUrl","messages","message","captchaData","url","authReducer","action","appActions","appReducer","PreLoader","className","st","loader","l_main","l_square","Settings","Music","Page404","style","pnf","status","title","subTitle","extra","href","PROFILE_PATH","User","React","memo","user","followingInProgress","followTC","unfollowTC","disable","some","wrapper","src","photos","small","commonAvatar","userAvatar","alt","name","followed","onClick","disabled","icon","MinusCircleOutlined","PlusCircleOutlined","getUsers","createSelector","usersPage","users","filter","u","getPageSize","pageSize","getTotalUsers","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UserSearchForm","onFilterChanged","useSelector","initialValues","term","friend","String","validate","onSubmit","setSubmitting","isSubmitting","forms_wrapper","component","value","htmlType","SearchOutlined","updateObjectInArray","items","itemId","objPropName","newObjProps","map","usersAPI","startFollowUsers","startUnfollowUsers","usersAction","count","getUsersTC","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","PaginatorAnt","onPageChanged","showQuickJumper","defaultCurrent","total","onChange","current","showTotal","range","pageSizeOptions","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","push","pathname","useCallback","pageNumber","follow","bind","unfollow","main_wrapper","marginBottom","users_wrapper","getPostData","profilePage","postData","getStatus","getIsAuth","getCaptcha","profileAPI","put","photoFile","formData","FormData","append","v1","likesCount","profile","getUserProfile","profileData","profileActions","setUserProfile","updateUserStatus","setUserStatus","deletePostAC","postId","savePhotoSucces","addPostAC","profileReducer","newPost","p","ProfileStatus","isOwner","useState","editMode","setEditMode","localStatus","setStatus","onDoubleClick","autoFocus","e","currentTarget","onBlur","Contact","contactTitle","contactValue","ProfileData","description","lookingForAJob","lookingForAJobDescription","fullName","aboutMe","Object","keys","contacts","key","ProfileDataFormRedux","reduxForm","form","handleSubmit","createField","MyInput","Textarea","ProfileInfo","savePhoto","saveProfile","updateStatus","span","offset","large","commonLogo","thisAva","customRequest","file","info","Post","setLikes","dislikes","setDislikes","setAction","actions","createElement","LikeFilled","LikeOutlined","comment_action","DislikeFilled","DislikeOutlined","author","avatar","messageLogo","content","datetime","moment","format","fromNow","TextArea","Input","MyPosts","setMessage","postsData","reverse","item","rows","Profile","ProfileContentContainerAPI","this","match","params","authorizedUserId","getUserStatus","refreshProfile","prevProps","prevState","Component","compose","statusData","photoData","getState","stopSubmit","_error","Promise","reject","withRouter","EmptyPage","getLogin","getError","LoginLabel","target","Login","resetError","onFinish","loginForm","Item","help","validateStatus","rules","required","prefix","placeholder","Password","iconRender","visible","valuePropName","noStyle","loginFormForgot","loginFormButton","undefined","width","SIGN_IN_PATH","DIALOGS_PATH","USERS_PATH","CHAT_PATH","NEWS_PATH","PAGE_NOT_FOUND_PATH","EMPTY_PAGE","Routes","path","render","exact","SuspendedDialogs","SuspendedChat","from","SubMenu","Menu","Nav","empty","theme","mode","UserOutlined","CommentOutlined","UserAddOutlined","TeamOutlined","CustomerServiceOutlined","SoundOutlined","SettingOutlined","FileOutlined","HeaderM","loginBlock","reducers","combineReducers","dialogsPage","dialogsReducer","formReducer","chat","chatReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","Header","Layout","Content","Footer","Sider","DialogContainer","lazy","ChatContainer","AppHooks","collapsed","setCollapsed","minHeight","collapsible","onCollapse","logoNew","margin","textAlign","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","messageData","dialogsData","dialogsActions","sendMessage","newMessageBody","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","send","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","m","index","array","length","FormControl","meta","touched","children","hasError","formControl","input","validators","text"],"mappings":"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","file":"static/js/main.60f1d52d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../SN-1-main/m2-bll/redux-store';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n} as withAuthRedirectPropsType);\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<withAuthRedirectPropsType & DispatchPropsType> = ({isAuth, ...restProps}) => {\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n        return <WrappedComponent {...restProps as WCP}/>;\r\n    };\r\n\r\n    return connect<withAuthRedirectPropsType, DispatchPropsType, WCP, AppRootStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}\r\n\r\ntype withAuthRedirectPropsType = {\r\n    isAuth: boolean\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__X00CB\",\"loginFormForgot\":\"Login_loginFormForgot__7x-uO\",\"antColRtl\":\"Login_antColRtl__ihUMx\",\"loginFormButton\":\"Login_loginFormButton__2gC9i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"User_wrapper__12aPY\",\"userAvatar\":\"User_userAvatar__2RftH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Users_selected__NhVjm\",\"main_wrapper\":\"Users_main_wrapper__18MyS\",\"users_wrapper\":\"Users_users_wrapper__2vTIr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3NtmR\",\"error\":\"FormControls_error__1wmAU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment_action\":\"Post_comment_action__tYHXF\"};","export default __webpack_public_path__ + \"static/media/samurai-robot-head-esport-mascot-logo_160921-34-removebg-preview.e6f9cbfd.png\";","import React from 'react';\r\n\r\n\r\nexport function withSuspense  <WCP>(WrappedComponent: React.ComponentType<WCP>)  {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>Loading</div>}><WrappedComponent {...props}/></React.Suspense>\r\n\r\n    };\r\n\r\n};\r\n\r\n","import {AppRootStateType} from './redux-store';\r\n\r\nexport const getIsInitialized = (state: AppRootStateType): boolean => {\r\n    return state.app.isInitialized\r\n};\r\n","export type MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginResponseDataType = {\r\n    userId: number\r\n}\r\nexport type LoginParamsType = {\r\n    email?: string | undefined\r\n    password?: string | undefined\r\n    rememberMe?: boolean | undefined\r\n    captcha?: null | string\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaRequired = 10\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '78abceff-cb7c-4815-8b56-016c67d0625d'\r\n    }\r\n});\r\n","import {\r\n    APIResponseType,\r\n    LoginParamsType,\r\n    LoginResponseDataType,\r\n    MeResponseDataType,\r\n    ResultCodeForCaptcha,\r\n    ResultCodesEnum\r\n} from '../../../Types/api-types';\r\nimport {instance} from '../../../SN-1-main/m3-dal/instance-api';\r\n\r\n\r\nexport const AuthAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>('auth/login', data).then(res => res.data);\r\n        // return instance.post<any>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType<LoginResponseDataType>>('auth/login').then(res => res.data);\r\n    }\r\n};\r\n\r\n\r\n","import {instance} from '../../../SN-1-main/m3-dal/instance-api';\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<{ url: string }>(`security/get-captcha-url`);\r\n    }\r\n};\r\n\r\n","import {AuthAPI} from '../l3-dal/auth-api';\r\nimport {LoginParamsType, ResultCodeForCaptcha, ResultCodesEnum} from '../../../Types/api-types';\r\nimport {securityAPI} from '../l3-dal/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from '../../../Types/Types';\r\n\r\n\r\nconst initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n    error: ''\r\n\r\n};\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET_USER_DATA':\r\n            return {\r\n                ...state, ...action.payload\r\n            };\r\n        case  'AUTH/SET_ERROR' :\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n\r\n            };\r\n        case 'AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const authActions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'AUTH/SET_USER_DATA', payload: {\r\n            userId, email, login, isAuth\r\n        }\r\n    } as const),\r\n    setError: (error: string) => (\r\n        {type: 'AUTH/SET_ERROR', payload: {error}} as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        {type: 'AUTH/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\r\n\r\n};\r\nexport const getAuthUserDataTC = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const meData = await AuthAPI.me();\r\n        if (meData.resultCode === ResultCodesEnum.Success) {\r\n            let {id, email, login} = meData.data;\r\n            dispatch(authActions.setAuthUserData(id, email, login, true));\r\n        }\r\n    } catch (e) {\r\n        console.log('Some error with getAuthUserDataTC');\r\n    }\r\n\r\n};\r\nexport const loginTC = (data: LoginParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        const loginData = await AuthAPI.login(data);\r\n        switch (loginData.resultCode) {\r\n            case  ResultCodesEnum.Success:\r\n                await dispatch(getAuthUserDataTC());\r\n                dispatch(authActions.getCaptchaUrlSuccess(''))\r\n                break;\r\n            case ResultCodeForCaptcha.CaptchaRequired:\r\n                await dispatch(getCaptchaUrl());\r\n                dispatch(authActions.setError(loginData.messages[0]));\r\n                break;\r\n            case  ResultCodesEnum.Error:\r\n                console.log('error');\r\n                dispatch(authActions.setError(loginData.messages[0]));\r\n\r\n\r\n        }\r\n    } catch (error) {\r\n\r\n        dispatch(authActions.setError(error.message));\r\n    }\r\n\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const captchaData = await securityAPI.getCaptchaUrl();\r\n        const captchaUrl = captchaData.data.url;\r\n        dispatch(authActions.getCaptchaUrlSuccess(captchaUrl));\r\n    } catch (error) {\r\n        dispatch(authActions.setError(error.message));\r\n    }\r\n\r\n\r\n};\r\nexport const logoutTC = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        const logoutData = await AuthAPI.logout();\r\n        if (logoutData.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(authActions.setAuthUserData(null, null, null, false));\r\n        }\r\n    } catch (error) {\r\n        dispatch(authActions.setError(error.message));\r\n    }\r\n\r\n};\r\n\r\ntype  InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof authActions>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\n\r\nexport default authReducer;\r\n","import {getAuthUserDataTC} from '../../SN-2-features/f1-login/l2-bll/auth-reducer';\r\nimport {BaseThunkType, InferActionsTypes} from '../../Types/Types';\r\n\r\n\r\nconst initialState = {\r\n    isInitialized: false\r\n};\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_IS_INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appActions = {\r\n    setInitialized: () => ({type: 'APP/SET_IS_INITIALIZED'} as const)\r\n};\r\n\r\nexport const setInitializedTC = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        await dispatch(getAuthUserDataTC());\r\n        dispatch(appActions.setInitialized());\r\n    } catch (e) {\r\n        console.log(e);\r\n        console.log('Some error with setInitializedTC');\r\n    }\r\n\r\n};\r\ntype ActionsType = InferActionsTypes<typeof appActions>\r\ntype  InitialStateType = typeof initialState\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport default appReducer;\r\n","import React from 'react';\r\nimport st from './preLoader.module.css';\r\n\r\n\r\nconst PreLoader: React.FC = () => {\r\n    return <div className={st.loader}>\r\n        <div className={st.l_main}>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n\r\n        </div>\r\n    </div>;\r\n\r\n};\r\n\r\n\r\nexport default PreLoader;\r\n","import React from 'react';\r\n\r\n\r\nfunction Settings() {\r\n    return (\r\n        <div><div>Settings</div></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\n\r\n\r\n function Music() {\r\n    return (\r\n        <div><div>Music</div></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Music;\r\n\r\n","import {Button, Result} from 'antd';\r\nimport React from 'react';\r\nimport style from './Page404.module.css'\r\nimport {PROFILE_PATH} from '../routes/Routes';\r\n\r\n\r\nexport const Page404: React.FC = () => {\r\n\r\n    return <section className={style.pnf}>\r\n        {/*<div className={style.pnf_error}> 404</div>*/}\r\n        {/*<p className={style.pnf_descr}>Sorry, Page not Found...</p>*/}\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle=\"Sorry, the page you visited does not exist.\"\r\n            extra={<Button type=\"primary\" href={PROFILE_PATH}>Back to Profile</Button>}\r\n        />\r\n    </section>\r\n}","export default __webpack_public_path__ + \"static/media/commonAvatar.da05b2b0.png\";","import React from 'react';\r\n\r\nimport st from './User.module.css';\r\nimport commonAvatar from '../../../../photo/commonAvatar.png';\r\nimport {Link} from 'react-router-dom';\r\nimport {userType} from '../../../../Types/Types';\r\nimport {PROFILE_PATH} from '../../../../SN-3-common/routes/Routes';\r\nimport {Button} from 'antd';\r\nimport {MinusCircleOutlined, PlusCircleOutlined} from '@ant-design/icons';\r\n\r\n\r\ntype UserType = {\r\n    user: userType\r\n    followingInProgress: Array<number>\r\n    followTC: (userId: number) => void\r\n    unfollowTC: (userId: number) => void\r\n\r\n}\r\n\r\nconst User: React.FC<UserType> = React.memo(({user, followingInProgress, followTC, unfollowTC}) => {\r\n\r\n\r\n    const unfollow = () => {\r\n        unfollowTC(user.id);\r\n    }\r\n    const follow = () => {\r\n        followTC(user.id);\r\n    }\r\n    const disable = followingInProgress.some(id => id === user.id)\r\n    return (\r\n        <div key={user.id} className={st.wrapper}>\r\n\r\n\r\n            <div>\r\n                <Link to={PROFILE_PATH + '/' + user.id}>\r\n                    <img src={user.photos.small != null\r\n                        ? user.photos.small\r\n                        : commonAvatar} className={st.userAvatar} alt=\"avatar\"/>\r\n                </Link>\r\n            </div>\r\n\r\n            <span> <b>Name:</b> {user.name}</span>\r\n            <div>\r\n                <b>Status :</b> <span>{user.status || 'What are you doing?'}</span>\r\n            </div>\r\n\r\n            <div>\r\n                {user.followed ?\r\n                    <Button type=\"primary\" onClick={unfollow} disabled={disable}\r\n                            icon={<MinusCircleOutlined/>}>\r\n                        Unfollow\r\n                    </Button>\r\n                    :\r\n                    <Button type=\"primary\" onClick={follow} disabled={disable}\r\n                            icon={<PlusCircleOutlined/>}\r\n                    >\r\n                        Follow\r\n                    </Button>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default User;\r\n","import {createSelector} from 'reselect';\r\nimport {FilterType} from './users-reducer';\r\nimport {AppRootStateType} from '../../../SN-1-main/m2-bll/redux-store';\r\nimport {userType} from '../../../Types/Types';\r\n\r\n\r\nconst getUsersSelector = (state: AppRootStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users): Array<userType> => {\r\n    return users.filter(u => true);\r\n}); // пример\r\n\r\nexport const getPageSize = (state: AppRootStateType): number | undefined => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsers = (state: AppRootStateType): number => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\nexport const getCurrentPage = (state: AppRootStateType): number => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppRootStateType): boolean => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppRootStateType): Array<number> => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\nexport const getUsersFilter = (state: AppRootStateType): FilterType => {\r\n    return state.usersPage.filter;\r\n};\r\n\r\n","import {SearchOutlined} from '@ant-design/icons';\r\nimport {Button} from 'antd';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {FilterType} from '../../u2-bll/users-reducer';\r\nimport {getUsersFilter} from '../../u2-bll/users-selectors';\r\nimport st from './UserSearchForm.module.css';\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\n\r\nexport const UserSearchForm: React.FC<PropsType> = React.memo(({onFilterChanged, ...rest}) => {\r\n    console.log('searh form');\r\n    const filter = useSelector(getUsersFilter);\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        };\r\n        onFilterChanged(filter);\r\n        setSubmitting(false);\r\n    };\r\n    return <>\r\n        <Formik\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form className={st.forms_wrapper}>\r\n                    <>\r\n                        <Field\r\n                            id=\"term\"\r\n                            name=\"term\"\r\n                            type=\"text\"\r\n\r\n                        />\r\n                    </>\r\n                    <>\r\n                        <Field\r\n                            component=\"select\"\r\n                            id=\"location\"\r\n                            name=\"friend\"\r\n                         >\r\n                            <option value=\"null\">All people</option>\r\n                            <option value=\"true\">Friends</option>\r\n                            <option value=\"false\">You may know</option>\r\n                        </Field>\r\n\r\n                    </>\r\n                    <Button type=\"primary\" htmlType={'submit'} disabled={isSubmitting} icon={<SearchOutlined/>}>\r\n                        Search\r\n                    </Button>\r\n                </Form>)}\r\n        </Formik>\r\n    </>;\r\n});\r\n\r\n","export const updateObjectInArray = (items:Array<any>,itemId:any,objPropName:any,newObjProps:any)=>{\r\n  return  items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps};\r\n        }\r\n        return u;\r\n    })\r\n\r\n\r\n}\r\n\r\n","import {instance} from '../../../SN-1-main/m3-dal/instance-api';\r\nimport {APIResponseType} from '../../../Types/api-types';\r\nimport {userType} from '../../../Types/Types';\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<ResponseItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n            (friend === null ? '' : `&friend=${friend}`));\r\n    },\r\n    startFollowUsers(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data);\r\n    },\r\n    startUnfollowUsers(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>;\r\n    },\r\n\r\n\r\n};\r\n\r\n\r\ntype ResponseItemsType = {\r\n    items: Array<userType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {BaseThunkType, InferActionsTypes, userType} from '../../../Types/Types';\r\nimport {updateObjectInArray} from '../../../utils/object-helpers/object-helpers';\r\nimport {usersAPI} from '../u3-dal/users-api';\r\nimport {APIResponseType, ResultCodesEnum} from '../../../Types/api-types';\r\n\r\n\r\nconst initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 10 as undefined | number,\r\n    totalUsersCount: 1,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\n\r\nconst usersReducer = (state: StateProfile = initialState, action: ActionType): StateProfile => {\r\n\r\n    switch (action.type) {\r\n        case 'USERS/SET_PAGE_SIZE':\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            };\r\n        case 'USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            };\r\n        case 'USERS/UNFOLLOW':\r\n            return {\r\n                ...state, users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            };\r\n        case 'USERS/SET_USERS':\r\n            return {...state, users: action.users};\r\n        case 'USERS/SET_PAGE':\r\n            return {...state, currentPage: action.currentPage};\r\n        case  'USERS/SET_TOTAL_USER_COUNT':\r\n            return {...state, totalUsersCount: action.count};\r\n        case 'USERS/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching};\r\n        case 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            };\r\n        case 'USERS/SET_FILTER': {\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const usersAction = {\r\n    followUser: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    setPageSize: (pageSize?: number) => ({type: 'USERS/SET_PAGE_SIZE', pageSize} as const),\r\n    unfollowUser: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<userType>) => ({type: 'USERS/SET_USERS', users} as const),\r\n    setPage: (currentPage: number) => ({type: 'USERS/SET_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'USERS/SET_TOTAL_USER_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n};\r\nexport const getUsersTC = (currentPage: number, filter: FilterType, pageSize?: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(usersAction.toggleIsFetching(true));\r\n        dispatch(usersAction.setPage(currentPage));\r\n        dispatch(usersAction.setFilter(filter));\r\n\r\n        const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n        dispatch(usersAction.toggleIsFetching(false));\r\n        dispatch(usersAction.setUsers(data.data.items));\r\n        dispatch(usersAction.setTotalUsersCount(data.data.totalCount));\r\n    } catch (e) {\r\n        console.log('Error with getUsersTC');\r\n    }\r\n};\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionType>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionType) => {\r\n    try {\r\n        dispatch(usersAction.toggleFollowingProgress(true, userId));\r\n        // dispatch(actionCreator(userId))\r\n        const data = await apiMethod(userId);\r\n\r\n\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actionCreator(userId));\r\n        }\r\n        dispatch(usersAction.toggleFollowingProgress(false, userId));\r\n    } catch (e) {\r\n        console.log('Error with _followUnfollowFlow ');\r\n    }\r\n};\r\nexport const followTC = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        let apiMethod = usersAPI.startFollowUsers.bind(usersAPI);\r\n        await _followUnfollowFlow(dispatch, userId, apiMethod, usersAction.followUser);\r\n    } catch (e) {\r\n        console.log('Error with followTC');\r\n    }\r\n};\r\nexport const unfollowTC = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        let apiMethod = usersAPI.startUnfollowUsers.bind(usersAPI);\r\n        await _followUnfollowFlow(dispatch, userId, apiMethod, usersAction.unfollowUser);\r\n    } catch (e) {\r\n        console.log('Error with unfollowTC');\r\n    }\r\n};\r\n\r\nexport type StateProfile = typeof initialState\r\ntype ActionType = InferActionsTypes<typeof usersAction>\r\ntype ThunkType = BaseThunkType<ActionType>\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport default usersReducer;\r\n","import {Pagination} from 'antd';\r\nimport React, {CSSProperties} from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    totalUsersCount?: number\r\n    currentPage?: number\r\n    onPageChanged: (page: number, pageSize?: number) => void\r\n    pageSize: number | undefined\r\n    portionSize?: number\r\n    style: CSSProperties\r\n\r\n}\r\n\r\n\r\nconst PaginatorAnt: React.FC<PropsType> = React.memo(({\r\n                                                          totalUsersCount,\r\n                                                          onPageChanged,\r\n                                                          currentPage,\r\n                                                          pageSize,\r\n                                                          style\r\n                                                      }) => {\r\n    return (\r\n        <div style={style}>\r\n            <Pagination showQuickJumper defaultCurrent={1} total={totalUsersCount}\r\n                        onChange={onPageChanged}\r\n                        current={currentPage}\r\n                        pageSize={pageSize}\r\n                        showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                        pageSizeOptions={['5', '10', '20', '50', '100']}\r\n            />\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n});\r\n\r\nexport default PaginatorAnt;\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport User from './User/User';\r\nimport {UserSearchForm} from './User/UserSearchForm';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from 'querystring';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsers,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../u2-bll/users-selectors';\r\nimport {FilterType, followTC, getUsersTC, unfollowTC, usersAction} from '../u2-bll/users-reducer';\r\nimport {userType} from '../../../Types/Types';\r\nimport st from './Users.module.css';\r\nimport PaginatorAnt from '../../../SN-3-common/Paginator/p1-ant/PaginatorAnt';\r\n\r\n\r\ntype PropsType = {}\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: React.FC<PropsType> = () => {\r\n    const dispatch = useDispatch();\r\n    const totalUsersCount = useSelector(getTotalUsers);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const users = useSelector(getUsers);\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType;\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n        if (!!parsed.page) actualPage = Number(parsed.page);\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string};\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null};\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true};\r\n                break;\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false};\r\n                break;\r\n        }\r\n\r\n        dispatch(getUsersTC(actualPage, actualFilter, pageSize));\r\n    }, []);\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {};\r\n        if (!!filter.term) query.term = filter.term;\r\n        if (filter.friend !== null) query.friend = String(filter.friend);\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        });\r\n    }, [filter, currentPage]);\r\n\r\n    const onPageChanged = useCallback((pageNumber = 1, pageSize?: number) => {\r\n        dispatch(usersAction.setPageSize(pageSize));\r\n        dispatch(getUsersTC(pageNumber, filter, pageSize));\r\n    }, [dispatch, filter, pageSize]);\r\n\r\n    const onFilterChanged = useCallback((filter: FilterType) => {\r\n\r\n        dispatch(getUsersTC(1, filter, pageSize));\r\n    }, [dispatch,filter]);\r\n\r\n    const follow = useCallback((userId: number) => {\r\n        dispatch(followTC(userId));\r\n    }, [dispatch]);\r\n\r\n    const unfollow = useCallback((userId: number) => {\r\n        dispatch(unfollowTC(userId));\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <div className={st.main_wrapper}>\r\n            <UserSearchForm onFilterChanged={onFilterChanged}/>\r\n            <PaginatorAnt totalUsersCount={totalUsersCount}\r\n                          onPageChanged={onPageChanged}\r\n                          currentPage={currentPage}\r\n                          pageSize={pageSize}\r\n                          style={{marginBottom: '10px'}}\r\n            />\r\n            <div className={st.users_wrapper}>\r\n                {users.map((user: userType) => <User\r\n                    unfollowTC={unfollow}\r\n                    followTC={follow}\r\n                    followingInProgress={followingInProgress}\r\n                    user={user}\r\n                    key={user.id}/>)}\r\n            </div>\r\n\r\n\r\n            {/*---old paginator---*/}\r\n            {/*<Paginator currentPage={currentPage} onPageChanged={onPageChanged} pageSize={pageSize}*/}\r\n            {/*           totalUsersCount={totalUsersCount}/>*/}\r\n\r\n        </div>);\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Users} from './Users';\r\nimport {getIsFetching} from '../u2-bll/users-selectors';\r\nimport PreLoader from '../../../SN-3-common/preLoader/preLoader';\r\nimport {withAuthRedirect} from '../../../HOC/WithAuthRedirect';\r\n\r\ntype UserPageType = {}\r\nconst UsersPage: React.FC<UserPageType> = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching);\r\n    return <>\r\n        {isFetching ? <PreLoader/> : null}\r\n        <Users/>\r\n    </>\r\n};\r\nexport default withAuthRedirect(UsersPage)\r\n","import {AppRootStateType} from '../../../SN-1-main/m2-bll/redux-store';\r\nimport {NewProfileType, PostType} from '../../../Types/Types';\r\n\r\n\r\nexport const getPostData = (state: AppRootStateType): PostType[] => {\r\n    return state.profilePage.postData;\r\n};\r\nexport const getProfile = (state: AppRootStateType): NewProfileType | null => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getStatus = (state: AppRootStateType): string => {\r\n    return state.profilePage.status\r\n}\r\nexport const getIsAuth = (state: AppRootStateType): boolean => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getUserId = (state: AppRootStateType): number | null => {\r\n    return state.auth.userId\r\n}\r\nexport const getCaptcha = (state: AppRootStateType): string | null => {\r\n    return state.auth.captchaUrl\r\n}\r\n","import {NewProfileType, PhotosType} from '../../../Types/Types';\r\nimport {instance} from '../../../SN-1-main/m3-dal/instance-api';\r\nimport {APIResponseType} from '../../../Types/api-types';\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<NewProfileType>(`profile/` + userId).then(res => res.data);\r\n    },\r\n    getStatus(userId: number | null) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put<APIResponseType<SavePhotosResponseType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(formData: NewProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, formData).then(res => res.data);\r\n    }\r\n};\r\n\r\ntype SavePhotosResponseType = {\r\n    photos: PhotosType\r\n}\r\n\r\n\r\n\r\n","import {v1} from 'uuid';\r\n\r\n\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {BaseThunkType, InferActionsTypes, NewProfileType, PhotosType, PostType} from '../../../Types/Types';\r\nimport {profileAPI} from '../p3-dal/profile-api';\r\nimport {ResultCodesEnum} from '../../../Types/api-types';\r\n\r\n\r\nlet initialState = {\r\n    postData: [\r\n        {\r\n            id: v1(),\r\n            message: 'Hello friendlo friendlo friendlo friendlo friendlo friendlo friendlo friendlo friendlo friendlo friendlo friendlo friend',\r\n            likesCount: 14\r\n        },\r\n        {id: v1(), message: 'Hello friend', likesCount: 14},\r\n        {id: v1(), message: 'Hello friend', likesCount: 14},\r\n        {id: v1(), message: 'Hello ', likesCount: 10},\r\n        {id: v1(), message: 'Hello ', likesCount: 10}],\r\n    profile: null as NewProfileType | null,\r\n    status: ''\r\n};\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD_POST':\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                message: action.post,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost],\r\n            };\r\n        case  'PROFILE/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case 'PROFILE/SET_USER_STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case 'PROFILE/DELETE_POST':\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(p => p.id !== action.postId)\r\n            };\r\n        case 'PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos} as NewProfileType\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n\r\n};\r\nexport const getUserProfile = (userId: number | null): ThunkType => async (dispatch) => {\r\n    try {\r\n        const profileData = await profileAPI.getProfile(userId);\r\n        dispatch(profileActions.setUserProfile(profileData));\r\n    } catch (e) {\r\n        console.log('Some error with getUserProfileTC');\r\n    }\r\n\r\n\r\n};\r\nexport const getUserStatus = (userId: number | null): ThunkType => async (dispatch) => {\r\n    try {\r\n        const statusData = await profileAPI.getStatus(userId);\r\n        dispatch(profileActions.setUserStatus(statusData));\r\n    } catch (e) {\r\n        console.log('Some error with getUserStatusTC');\r\n    }\r\n\r\n};\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const statusData = await profileAPI.updateStatus(status);\r\n        if (statusData.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(profileActions.setUserStatus(status));\r\n        }\r\n    } catch (e) {\r\n        console.log('Some error with updateUserStatusTC');\r\n    }\r\n};\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    try {\r\n        const photoData = await profileAPI.savePhoto(file);\r\n        if (photoData.resultCode === 0) {\r\n            dispatch(profileActions.savePhotoSucces(photoData.data.photos));\r\n        }\r\n    } catch (e) {\r\n        console.log('Some error with savePhoto');\r\n    }\r\n\r\n};\r\nexport const saveProfile = (formData: NewProfileType): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const userId = getState().auth.userId;\r\n        const saveProfile = await profileAPI.saveProfile(formData);\r\n        if (saveProfile.resultCode === ResultCodesEnum.Success) {\r\n            await dispatch(getUserProfile(userId));\r\n        } else {\r\n            dispatch(stopSubmit('edit-profile', {_error: saveProfile.messages[0]}));\r\n            return Promise.reject(saveProfile.messages[0]);\r\n        }\r\n    } catch (e) {\r\n        console.log('Some error with saveProfile');\r\n    }\r\n\r\n};\r\nexport const profileActions = {\r\n    deletePostAC: (postId: string) => ({\r\n        type: 'PROFILE/DELETE_POST'\r\n        , postId\r\n    } as const),\r\n    savePhotoSucces: (photos: PhotosType) => ({\r\n        type: 'PROFILE/SAVE_PHOTO_SUCCESS'\r\n        , photos\r\n    } as const),\r\n    addPostAC: (post: string) => ({type: 'PROFILE/ADD_POST', post} as const),\r\n    setUserProfile: (profile: NewProfileType) => ({type: 'PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setUserStatus: (status: string) => ({\r\n        type: 'PROFILE/SET_USER_STATUS',\r\n        status\r\n    } as const),\r\n\r\n};\r\n\r\nexport type  InitialStateType = typeof initialState\r\nexport type ActionsType = InferActionsTypes<typeof profileActions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n\r\nexport default profileReducer;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getStatus} from '../../p2-bll/profile-selectors';\r\nimport {updateUserStatus} from '../../p2-bll/profile-reducer';\r\n\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = ({isOwner}) => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(getStatus)\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [localStatus, setStatus] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setStatus(status);\r\n    }, [status]);\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        dispatch(updateUserStatus(localStatus));\r\n    };\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {/*Cant change other status*/}\r\n            {!isOwner &&\r\n            <div><b>Status</b> <span>{status || 'What are you doing?'}</span></div>\r\n            }\r\n            {/*---*/}\r\n            {isOwner && !editMode && <div>\r\n                <b>Status</b> <span onDoubleClick={activateEditMode}>{status || 'What are you doing?'}</span>\r\n            </div>}\r\n            {editMode && <div><input autoFocus={true} onChange={onStatusChange} onBlur={deactivateEditMode}\r\n                                     value={localStatus}/></div>}\r\n\r\n        </div>\r\n    )\r\n        ;\r\n\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import React from 'react';\r\nimport st from './ProfileData.module.css';\r\nimport {ContactsType, NewProfileType} from '../../../../Types/Types';\r\nimport {Button} from 'antd';\r\n\r\nconst Contact: React.FC<ContactsPropsType> = React.memo(({contactTitle, contactValue}) => {\r\n    return (<div>\r\n        <b>{contactTitle}</b> : {contactValue}\r\n    </div>);\r\n});\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = React.memo(({profile, isOwner, editMode}) => {\r\n\r\n    return <div className={st.description}>\r\n        {isOwner && <div>\r\n            <Button onClick={editMode} type='primary'>Change info</Button>\r\n        </div>}\r\n        <div>\r\n            <b>Looking for a job</b> : {profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b> : {profile.lookingForAJob}\r\n        </div> && <div>\r\n            <b>I'm looking for</b> : {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full Name</b> : {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>About me</b> : {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>You can find me there</b> : {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key}\r\n                            contactValue={profile.contacts[key as keyof ContactsType]}/>;\r\n        })}\r\n        </div>\r\n    </div>;\r\n});\r\nexport default ProfileData;\r\n\r\ntype ProfileDataType = {\r\n    profile: NewProfileType\r\n    isOwner: boolean\r\n    editMode: () => void\r\n}\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n","import React from 'react';\r\nimport {NewProfileType} from '../../../../Types/Types';\r\nimport st from '../ProfileData/ProfileData.module.css';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, MyInput, Textarea} from '../../../../SN-3-common/FormControls/FormControls';\r\nimport {Button} from 'antd';\r\n\r\ntype PropsType = {\r\n    profile: NewProfileType\r\n\r\n}\r\nconst ProfileDataForm: React.FC<InjectedFormProps<NewProfileType, PropsType> & PropsType> = ({\r\n                                                                                                 profile,\r\n                                                                                                 handleSubmit,\r\n                                                                                                 error\r\n\r\n                                                                                             }) => {\r\n    return <form>\r\n        <div className={st.description}>\r\n            <div>\r\n                <Button onClick={handleSubmit} type='primary'>Save</Button>\r\n                {error && <div>{error}</div>}\r\n            </div>\r\n            <div>\r\n                <b>Full Name</b>: {createField('Full name', 'fullName', [], MyInput)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b> :{createField('', 'lookingForAJob', [], MyInput, {type: 'checkbox'})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional\r\n                    skills</b> : {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b> :{createField('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>You can find me there</b> : {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}:</b> {createField(key, 'contacts.' + key, [], MyInput)}\r\n\r\n                </div>;\r\n            })}\r\n            </div>\r\n        </div>\r\n    </form>;\r\n};\r\n\r\nconst ProfileDataFormRedux = reduxForm<NewProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedux;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {NewProfileType} from '../../../Types/Types';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport commonLogo from '../../../photo/commonAvatar.png';\r\nimport st from './ProfileData/ProfileData.module.css';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\r\nimport PreLoader from '../../../SN-3-common/preLoader/preLoader';\r\nimport {UploadOutlined} from '@ant-design/icons/lib/icons';\r\nimport {Button, Col, Row, Upload} from 'antd';\r\nimport {UploadRequestOption as RcCustomRequestOptions} from 'rc-upload/lib/interface';\r\nimport {UploadChangeParam} from 'antd/es/upload';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => Promise<any>\r\n    profile: NewProfileType | null\r\n    saveProfile: (profile: NewProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = React.memo(({\r\n                                                         isOwner,\r\n                                                         profile,\r\n                                                         savePhoto,\r\n                                                         status,\r\n                                                         updateStatus,\r\n                                                         saveProfile\r\n                                                     }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const prop = {\r\n        onChange(info: UploadChangeParam) {\r\n            info.file.status = 'done'\r\n        },\r\n    };\r\n    const goToEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    if (!profile) {\r\n        return <div><PreLoader/></div>;\r\n    }\r\n    const onMainPhotoSelected = (value: RcCustomRequestOptions) => {\r\n        savePhoto(value.file)\r\n    };\r\n    const onSubmit = (profile: NewProfileType) => {\r\n        saveProfile(profile).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    };\r\n\r\n\r\n    //old variant\r\n    // const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     if (e.target.files && e.target.files.length) {\r\n    //         savePhoto(e.target.files[0]);\r\n    //     }\r\n    // };\r\n    return <>\r\n        <Row>\r\n            <Col span={12} offset={12}>\r\n                <img src={profile.photos.large || commonLogo} alt={'ava'} className={st.thisAva}/>\r\n            </Col>\r\n            <Col span={12} offset={12}>\r\n                <ProfileStatus isOwner={isOwner}/>\r\n            </Col>\r\n            <Col span={12} offset={12}>\r\n                {isOwner && <Upload customRequest={onMainPhotoSelected} {...prop} >\r\n                    <Button type='primary'>\r\n                        <UploadOutlined/> Change photo\r\n                    </Button>\r\n                </Upload>}\r\n            </Col>\r\n        </Row>\r\n\r\n\r\n        {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\r\n            <ProfileData profile={profile} isOwner={isOwner} editMode={goToEditMode}/>}\r\n\r\n\r\n        {/*old variant*/}\r\n        {/*{isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}*/}\r\n        {/*<ProfileStatusClass status={props.status} updateStatus={props.updateStatus}/>*/}\r\n    </>;\r\n\r\n});\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n\r\n\r\n\r\n","import React, {createElement, useState} from 'react';\r\nimport messageLogo from '../../../../photo/commonAvatar.png';\r\nimport {Avatar, Comment, Tooltip} from 'antd';\r\nimport {DislikeFilled, DislikeOutlined, LikeFilled, LikeOutlined} from '@ant-design/icons';\r\nimport st from './Post.module.css';\r\nimport moment from 'moment';\r\n\r\ntype PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post: React.FC<PostType> = React.memo(({id, message, likesCount}) => {\r\n    const [likes, setLikes] = useState(0);\r\n    const [dislikes, setDislikes] = useState(0);\r\n    const [action, setAction] = useState<null | string>(null);\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className={st.comment_action}>{likesCount}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className={st.comment_action}>{dislikes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n    ];\r\n\r\n    return (\r\n        <Comment\r\n            actions={actions}\r\n            author={<a>Omgpiu</a>}\r\n            avatar={\r\n                <Avatar\r\n                    src={messageLogo}\r\n                    alt=\"Logo\"\r\n                />\r\n            }\r\n            content={\r\n                <p>\r\n                    {message}\r\n                </p>\r\n            }\r\n            datetime={\r\n                <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n                    <span>{moment().fromNow()}</span>\r\n                </Tooltip>\r\n            }\r\n        />\r\n    );\r\n});\r\nexport default Post;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport st from './MyPosts.module.css';\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getPostData} from '../p2-bll/profile-selectors';\r\nimport {profileActions} from '../p2-bll/profile-reducer';\r\nimport {Button, Input} from 'antd';\r\nimport Post from './Post/Post';\r\n\r\nconst {TextArea} = Input;\r\n\r\ntype PropsPType = {}\r\n\r\nexport const MyPosts: React.FC<PropsPType> = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const postData = useSelector(getPostData)\r\n    const [message, setMessage] = useState('')\r\n    const postsData = [...postData]\r\n        .reverse()\r\n        .map(post => <Post key={post.id} message={post.message} id={post.id} likesCount={post.likesCount}/>);\r\n\r\n\r\n    const onAddPostANT = () => {\r\n        dispatch(profileActions.addPostAC(message))\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    // old\r\n    // const onAddPost = useCallback((values: any) => {\r\n    //     dispatch(profileActions.addPostAC(values.newPostText))\r\n    // }, [dispatch]);\r\n    return (\r\n        <div className={st.item}>\r\n            <TextArea rows={4} onChange={onChangeHandler}/>\r\n            <Button onClick={onAddPostANT} type='primary'>Add post</Button>\r\n            {/*old*/}\r\n            {/*<AddNewPostFormRedux onSubmit={onAddPost}/>*/}\r\n            {postsData}\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport ProfileInfo from '../ProfileInfo/ProfileInfo';\r\nimport MyPosts from '../MyPosts/MyPosts';\r\nimport {NewProfileType} from '../../../Types/Types';\r\nimport {Col, Row} from 'antd';\r\n\r\n\r\nexport const Profile: React.FC<PropsType> = React.memo(({\r\n                                                            savePhoto,\r\n                                                            isOwner,\r\n                                                            profile,\r\n                                                            status,\r\n                                                            updateStatus,\r\n                                                            saveProfile\r\n                                                        }) => {\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Row>\r\n                    <Col span={12}>\r\n                        <ProfileInfo savePhoto={savePhoto}\r\n                                     isOwner={isOwner}\r\n                                     profile={profile}\r\n                                     status={status}\r\n                                     updateStatus={updateStatus}\r\n                                     saveProfile={saveProfile}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Col span={9}> <MyPosts/></Col>\r\n            </Row>\r\n\r\n\r\n        </>\r\n    );\r\n\r\n});\r\ntype PropsType = {\r\n    profile: NewProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => Promise<any>\r\n    saveProfile: (formData: any) => any\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {Profile} from './ProfileContent';\r\nimport {NewProfileType} from '../../../Types/Types';\r\nimport {AppRootStateType} from '../../../SN-1-main/m2-bll/redux-store';\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from '../p2-bll/profile-reducer';\r\nimport {withAuthRedirect} from '../../../HOC/WithAuthRedirect';\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getUserStatus: (userId: number | null) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => Promise<any>\r\n    saveProfile: (profile: NewProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n//\r\n// type HooksType = {}\r\n// const ProfileHooks: React.FC<HooksType> = (props) => {\r\n//     const {id} = useParams<{ id: string }>()\r\n//     const dispatch = useDispatch();\r\n//     const profile = useSelector(getProfile)\r\n//     const status = useSelector(getStatus)\r\n//     const isAuth = useSelector(getIsAuth)\r\n//     const authorizedUserId = useSelector(getUserId)\r\n//\r\n//     const getUserProfile = useCallback((userId: number | null) => {\r\n//         dispatch(getUserProfile(userId))\r\n//     }, [dispatch])\r\n//     const getUserStatus = useCallback((userId: number | null) => {\r\n//         dispatch(getUserStatus(userId))\r\n//     }, [dispatch])\r\n//     const updateUserStatus = useCallback((status: string) => {\r\n//         dispatch(updateUserStatus(status))\r\n//     }, [dispatch])\r\n//     const savePhoto = useCallback((photo: File) => {\r\n//         dispatch(savePhoto(photo))\r\n//     }, [])\r\n//     const saveProfile = useCallback(async (profile: NewProfileType): Promise<any> => {\r\n//         await dispatch(saveProfile(profile))\r\n//     }, [])\r\n//\r\n//\r\n//     useEffect(() => {\r\n//     }, [])\r\n//\r\n//\r\n//     return (\r\n//         <div>\r\n//\r\n//\r\n//         </div>);\r\n//\r\n// }\r\n\r\n\r\nclass ProfileContentContainerAPI extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error('ID should exists in URI params or in state (\\'authorizedUserId\\')');\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getUserStatus(userId);\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateUserStatus}\r\n                />\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId,\r\n\r\n\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContentContainerAPI);\r\n\r\n\r\n","import {Button, Result} from 'antd';\r\nimport React from 'react';\r\nimport {PROFILE_PATH} from '../routes/Routes';\r\n\r\ntype PropsType = {}\r\nexport const EmptyPage: React.FC<PropsType> = () => {\r\n    return (\r\n        <>\r\n            <Result\r\n                status=\"403\"\r\n                title=\"Sorry, the page you visited does not exist yet.\"\r\n                subTitle=\"We hardly working on it.\"\r\n                extra={<Button type=\"primary\" href={PROFILE_PATH}>Back to Profile</Button>}\r\n            />\r\n        </>\r\n    )\r\n}","import {AppRootStateType} from '../../../SN-1-main/m2-bll/redux-store';\r\n\r\n\r\nexport const getLogin = (state: AppRootStateType): string | null => {\r\n    return state.auth.login;\r\n};\r\nexport const getError = (state: AppRootStateType): string => {\r\n    return state.auth.error;\r\n};\r\n","import React from 'react';\r\n\r\nexport const LoginLabel = () => {\r\n    return (\r\n        <div>\r\n            <p>To log in or get registered\r\n                <a href={'https://social-network.samuraijs.com/'}\r\n                   target={'_blank'}> HERE\r\n                </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: <b>free@samuraijs.com</b></p>\r\n            <p>Password: <b>free</b></p>\r\n        </div>)\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {authActions, loginTC} from '../l2-bll/auth-reducer';\r\nimport {Button, Checkbox, Form, Input} from 'antd';\r\nimport st from './Login.module.css';\r\nimport {EyeInvisibleOutlined, EyeTwoTone, LockOutlined, UserOutlined} from '@ant-design/icons/lib/icons';\r\nimport {getCaptcha, getIsAuth} from '../../f2-profile/p2-bll/profile-selectors';\r\nimport {getError} from '../l2-bll/auth-selectors';\r\nimport {LoginLabel} from './l2-old-features/LoginLabel';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {PROFILE_PATH} from '../../../SN-3-common/routes/Routes';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const error = useSelector(getError);\r\n    const isAuth = useSelector(getIsAuth);\r\n    const captchaUrl = useSelector(getCaptcha);\r\n\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PROFILE_PATH}/>;\r\n    }\r\n    const onSubmit = async (values: {\r\n        email: string,\r\n        password: string,\r\n        captcha: string\r\n    }) => {\r\n        await dispatch(loginTC(values));\r\n\r\n    };\r\n    const resetError = () => {\r\n        dispatch(authActions.setError(''));\r\n    };\r\n    return (\r\n        <>\r\n            <Form onFinish={onSubmit}\r\n                  className={st.loginForm}\r\n            >\r\n\r\n                <LoginLabel/>\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    {...error && {\r\n                        help: error,\r\n                        validateStatus: 'error',\r\n                    }}\r\n                    rules={[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your Email!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                           type=\"email\"\r\n                           name=\"email\"\r\n                           placeholder=\"Email\"\r\n                           onClick={resetError}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    {...error && {\r\n                        help: error,\r\n                        validateStatus: 'error'\r\n                    }}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your Password!',\r\n                        },\r\n\r\n                    ]}\r\n                >\r\n                    <Input.Password\r\n                        prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                        placeholder=\"Password\"\r\n                        iconRender={visible => (visible ? <EyeTwoTone/> : <EyeInvisibleOutlined/>)}\r\n                        onClick={resetError}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Form.Item\r\n                        name=\"remember\"\r\n                        valuePropName=\"checked\" noStyle>\r\n                        <Checkbox>Remember me</Checkbox>\r\n                    </Form.Item>\r\n                    <Link target={'_blank'} className={st.loginFormForgot}\r\n                          to=\"https://social-network.samuraijs.com/login\">\r\n                        Forgot password\r\n                    </Link>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className={st.loginFormButton}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                    Or <Link target={'_blank'} to=\"https://social-network.samuraijs.com/signUp\">register now!</Link>\r\n\r\n\r\n                </Form.Item>\r\n\r\n                <img src={captchaUrl ? captchaUrl : undefined} alt=\"\"/>\r\n\r\n                {captchaUrl && <Form.Item\r\n                    name=\"captcha\"\r\n                >\r\n                    <Input\r\n                        name=\"captcha\"\r\n                        placeholder=\"captcha\"\r\n                        onClick={resetError}\r\n                        style={{width: '100px'}}\r\n                    />\r\n                </Form.Item>}\r\n            </Form>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {SuspendedChat, SuspendedDialogs} from '../../SN-1-main/m1-ui/App';\r\nimport Settings from '../../SN-2-features/f8-settings/n1-ui/Settings';\r\nimport Music from '../../SN-2-features/f6-music/m1-ui/Music';\r\nimport {Page404} from '../Page404/Page404';\r\nimport UsersPage from '../../SN-2-features/f4-users/u1-ui/UsersPage';\r\nimport ProfileContentContainerAPI from '../../SN-2-features/f2-profile/p1-ui/ProfileContentContainerAPI';\r\nimport {EmptyPage} from '../emptyPage/emptyPage';\r\nimport {Login} from '../../SN-2-features/f1-login/l1-ui/Login';\r\n\r\n\r\nexport const SIGN_IN_PATH = '/login';\r\nexport const PROFILE_PATH = '/profile';\r\nexport const DIALOGS_PATH = '/dialogs';\r\nexport const USERS_PATH = '/users';\r\nexport const CHAT_PATH = '/chat';\r\nexport const NEWS_PATH = '/news';\r\nexport const MUSIC_PATH = '/music';\r\nexport const SETTINGS_PATH = '/settings';\r\nexport const PAGE_NOT_FOUND_PATH = '/404';\r\nexport const EMPTY_PAGE = '/empty_page'\r\n\r\ntype PropsType = {}\r\nexport const Routes: React.FC<PropsType> = (props) => {\r\n\r\n    return <>\r\n        <Switch>\r\n            <Route path={SIGN_IN_PATH} render={() => <Login/>}/>\r\n            <Route exact path='/'\r\n                   render={() => <Redirect to={PROFILE_PATH}/>}/>\r\n            <Route path={DIALOGS_PATH} render={() => <SuspendedDialogs/>}/>\r\n            <Route path={PROFILE_PATH + '/:userId?'} render={() =>\r\n                <ProfileContentContainerAPI/>}/>\r\n            <Route path={USERS_PATH} render={() => <UsersPage/>}/>\r\n            <Route path={NEWS_PATH} render={() => <Login/>}/>\r\n            <Route path={PAGE_NOT_FOUND_PATH} render={() => <Page404/>}/>\r\n            <Route path={MUSIC_PATH} render={() => <Music/>}/>\r\n            <Route path={SETTINGS_PATH} render={() => <Settings/>}/>\r\n            <Route path={CHAT_PATH} render={() => <SuspendedChat/>}/>\r\n            <Route path={EMPTY_PAGE} render={() => <EmptyPage/>}/>\r\n            <Redirect from={'*'} to={PAGE_NOT_FOUND_PATH}/>\r\n        </Switch>\r\n\r\n    </>;\r\n};\r\n\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Menu} from 'antd';\r\nimport {\r\n    CommentOutlined,\r\n    CustomerServiceOutlined,\r\n    FileOutlined,\r\n    SettingOutlined,\r\n    SoundOutlined,\r\n    TeamOutlined,\r\n    UserAddOutlined,\r\n    UserOutlined\r\n} from '@ant-design/icons';\r\nimport {CHAT_PATH, DIALOGS_PATH, EMPTY_PAGE, NEWS_PATH, PROFILE_PATH, USERS_PATH} from '../routes/Routes';\r\n\r\nconst {SubMenu} = Menu;\r\ntype PropsType = {}\r\nexport const Nav: React.FC<PropsType> = () => {\r\n    const empty = <Link to={EMPTY_PAGE}></Link>\r\n    return (\r\n        <Menu theme=\"dark\" mode=\"inline\">\r\n            <Menu.Item key=\"1\" icon={<UserOutlined/>}>\r\n                <Link to={PROFILE_PATH}>Profile</Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"Main/Messages\" icon={<CommentOutlined/>}>\r\n                <Link to={DIALOGS_PATH}>Messages</Link>\r\n            </Menu.Item>\r\n            {/*<Menu.Item key=\"Main/Friends\" icon={<TeamOutlined/>}>*/}\r\n            {/*    <Link to={USERS_PATH}>Friends</Link>*/}\r\n            {/*</Menu.Item>*/}\r\n            <Menu.Item key=\"Main/Community\" icon={<UserAddOutlined/>}>\r\n                <Link to={USERS_PATH}> Community</Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"Main/Chat\" icon={<TeamOutlined/>}>\r\n                <Link to={CHAT_PATH}>Chat</Link>\r\n            </Menu.Item>\r\n            <SubMenu key=\"Music\" icon={<CustomerServiceOutlined/>} title=\"Music\">\r\n                <Menu.Item key=\"Music/New\">{empty}New music\r\n                </Menu.Item>\r\n                <Menu.Item key=\"Music/My\">{empty}My music\r\n                </Menu.Item>\r\n                <Menu.Item key=\"Music/All\">{empty}All music\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"News\" icon={<SoundOutlined/>} title=\"News\">\r\n                <Menu.Item key=\"News/Friends\">{empty}Friends\r\n                </Menu.Item>\r\n                <Menu.Item key=\"News/World\">{empty}World\r\n                </Menu.Item>\r\n                <Menu.Item key=\"News/City\">{empty}City\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"Settings\" icon={<SettingOutlined/>} title=\"Settings\">\r\n                <Menu.Item key=\"Settings/General\">{empty}General\r\n                </Menu.Item>\r\n                <Menu.Item key=\"Settings/Security\">{empty}Security\r\n                </Menu.Item>\r\n                <Menu.Item key=\"Settings/Privacy\">{empty}Privacy\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <Menu.Item key=\"Login\" icon={<FileOutlined/>}>\r\n                <Link to={NEWS_PATH}>Login</Link>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport st from './Header.module.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {Button} from 'antd';\r\nimport {getIsAuth} from '../../SN-2-features/f2-profile/p2-bll/profile-selectors';\r\nimport {logoutTC} from '../../SN-2-features/f1-login/l2-bll/auth-reducer';\r\nimport {getLogin} from '../../SN-2-features/f1-login/l2-bll/auth-selectors';\r\nimport {SIGN_IN_PATH} from '../routes/Routes';\r\n\r\ntype PropsType = {}\r\nexport const HeaderM: React.FC<PropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector(getIsAuth)\r\n    const login = useSelector(getLogin)\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={st.loginBlock}>\r\n            {isAuth\r\n                ? <>{login} - <Button type=\"primary\"   onClick={logout}>Log out</Button></>\r\n                : <Link to={SIGN_IN_PATH}>Login</Link>}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","import {applyMiddleware, combineReducers, createStore, Store} from 'redux';\r\n\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport appReducer from './app-reducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport profileReducer from '../../SN-2-features/f2-profile/p2-bll/profile-reducer';\r\nimport dialogsReducer from '../../SN-2-features/f3-dialogs/d2-bll/dialogs-reducer';\r\nimport usersReducer from '../../SN-2-features/f4-users/u2-bll/users-reducer';\r\nimport authReducer from '../../SN-2-features/f1-login/l2-bll/auth-reducer';\r\nimport chatReducer from '../../SN-2-features/f5-chat/c2-bll/chat-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n    chat: chatReducer\r\n});\r\n// We have to combine reducers, it's like our SN-1-main state\r\n\r\n\r\nlet store: Store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\nimport {Provider, useDispatch, useSelector} from 'react-redux';\r\nimport logoNew from '../../photo/samurai-robot-head-esport-mascot-logo_160921-34-removebg-preview.png'\r\nimport 'antd/dist/antd.css';\r\n\r\nimport {Layout} from 'antd';\r\nimport {withSuspense} from '../../HOC/withSuspense';\r\nimport {getIsInitialized} from '../m2-bll/app-selectors';\r\nimport {setInitializedTC} from '../m2-bll/app-reducer';\r\nimport PreLoader from '../../SN-3-common/preLoader/preLoader';\r\nimport {Nav} from '../../SN-3-common/Nav/Nav';\r\nimport {HeaderM} from '../../SN-3-common/Header/Header';\r\nimport {Routes} from '../../SN-3-common/routes/Routes';\r\nimport store from '../m2-bll/redux-store';\r\n\r\n\r\ntype PropsType = {}\r\n\r\nconst {Header, Content, Footer, Sider} = Layout;\r\n\r\n\r\nconst DialogContainer = React.lazy(() => import('../../SN-2-features/f3-dialogs/d1-ui/Dialogs'));\r\nconst ChatContainer = React.lazy(() => import('../../SN-2-features/f5-chat/c1-ui/ChatPage'));\r\n// type MapPropsType = ReturnType<typeof mapStateToProps>\r\n// type DispatchPropsType = {\r\n//     setInitializedTC: () => void\r\n// }\r\nexport const SuspendedDialogs = withSuspense(DialogContainer);\r\nexport const SuspendedChat = withSuspense(ChatContainer);\r\nexport const AppHooks: React.FC<PropsType> = () => {\r\n    const dispatch = useDispatch()\r\n    const [collapsed, setCollapsed] = useState<boolean>(false)\r\n    const isInitialized = useSelector(getIsInitialized)\r\n\r\n    useEffect(() => {\r\n        dispatch(setInitializedTC());\r\n    }, [dispatch])\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(!collapsed);\r\n    };\r\n\r\n    if (!isInitialized) {\r\n        return <PreLoader/>;\r\n    }\r\n    return (<div>\r\n            <Layout style={{minHeight: '100vh'}}>\r\n                <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n                    <div className=\"logo\"><img src={logoNew} alt=\"newLogo\"/></div>\r\n                    <Nav/>\r\n                </Sider>\r\n                <Layout className=\"site-layout\">\r\n                    <Header className=\"site-layout-background\">\r\n                        <HeaderM/>\r\n                    </Header>\r\n                    <Content style={{margin: '0 16px'}}>\r\n                        <Routes/>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Samurai Social Network ©2020 Created by Alex Dubrovskii &\r\n                        IT-KAMASUTRA</Footer>\r\n                </Layout>\r\n            </Layout>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n//\r\n// class App extends React.Component<MapPropsType & DispatchPropsType> {\r\n//     state = {\r\n//         collapsed: false,\r\n//     };\r\n//\r\n//     catchAllUnhandledError = (e: PromiseRejectionEvent) => {\r\n//         alert('Some Error');\r\n//\r\n//     };\r\n//\r\n//     onCollapse = (collapsed: boolean) => {\r\n//         console.log(collapsed);\r\n//         this.setState({collapsed});\r\n//     };\r\n//\r\n//     componentDidMount() {\r\n//         this.props.setInitializedTC();\r\n//         if (this.props.isAuth) return <Redirect to={SIGN_IN_PATH}/>;\r\n//         window.addEventListener('unhandledrejection', this.catchAllUnhandledError);\r\n//     }\r\n//\r\n//     componentWillUnmount() {\r\n//         window.removeEventListener('unhandledrejection', this.catchAllUnhandledError);\r\n//     }\r\n//\r\n//     render() {\r\n//         if (!this.props.isInitialized) {\r\n//             return <PreLoader/>;\r\n//         }\r\n//         const {collapsed} = this.state;\r\n//         return (\r\n//             <Layout style={{minHeight: '100vh'}}>\r\n//                 <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n//                     <div className=\"logo\"><img src={logoNew} alt=\"newLogo\"/></div>\r\n//                     <Nav/>\r\n//                 </Sider>\r\n//                 <Layout className=\"site-layout\">\r\n//                     <Header className=\"site-layout-background\">\r\n//                         <HeaderM/>\r\n//                     </Header>\r\n//                     <Content style={{margin: '0 16px'}}>\r\n//                         <Routes/>\r\n//                     </Content>\r\n//                     <Footer style={{textAlign: 'center'}}>Samurai Social Network ©2020 Created by Alex Dubrovskii &\r\n//                         IT-KAMASUTRA</Footer>\r\n//                 </Layout>\r\n//             </Layout>\r\n//\r\n//\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// type mapStateToPropsType = {\r\n//     isInitialized: boolean\r\n//     isAuth: boolean\r\n//     login: string | null\r\n// }\r\n// const mapStateToProps = (state: AppRootStateType): mapStateToPropsType => ({\r\n//     isInitialized: state.app.isInitialized,\r\n//     isAuth: state.auth.isAuth,\r\n//     login: state.auth.login\r\n// });\r\n//\r\n// const AppContainer = compose<React.ComponentType>(\r\n//     withRouter,\r\n//     connect(mapStateToProps, {setInitializedTC}))(App);\r\n\r\nconst SamuraiJSApp: React.FC = () => {\r\n    return <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider store={store}>\r\n            <AppHooks/>\r\n        </Provider>\r\n    </HashRouter>;\r\n\r\n};\r\nexport default SamuraiJSApp;\r\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport SamuraiJSApp from './SN-1-main/m1-ui/App';\r\n\r\nReactDOM.render(\r\n    <SamuraiJSApp/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n","import {v1} from 'uuid';\r\nimport {InferActionsTypes} from '../../../Types/Types';\r\n\r\n\r\nlet initialState = {\r\n    messageData: [\r\n        {id: v1(), message: 'Hello'},\r\n        {id: v1(), message: 'My name'},\r\n        {id: v1(), message: 'My name is'},\r\n        {id: v1(), message: 'My name is Sasha'}\r\n    ] as Array<messageDataType>,\r\n    dialogsData: [\r\n        {id: v1(), name: 'Artem'},\r\n        {id: v1(), name: 'Vova'},\r\n        {id: v1(), name: 'Dima'},\r\n        {id: v1(), name: 'Masha'},\r\n        {id: v1(), name: 'Egor'}\r\n    ] as Array<dialogsDataType>\r\n};\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsType = initialState, action: ActionsType): InitialStateDialogsType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/SEND-NEW-MESSAGE-TEXT':\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, {id: v1(), message: action.newMessageBody}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const dialogsActions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'DIALOGS/SEND-NEW-MESSAGE-TEXT', newMessageBody} as const),\r\n};\r\n\r\n\r\nexport type  InitialStateDialogsType = typeof initialState\r\nexport type ActionsType = InferActionsTypes<typeof dialogsActions>\r\ntype messageDataType = {\r\n    id: string\r\n    message: string\r\n}\r\ntype dialogsDataType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport default dialogsReducer;\r\n","const subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","import {Dispatch} from 'redux';\r\n\r\nimport {FormAction} from 'redux-form';\r\nimport {v1} from 'uuid';\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../c3-dal/chat-api';\r\nimport {BaseThunkType, InferActionsTypes} from '../../../Types/Types';\r\n\r\nexport type ChatMessageType = ChatMessageAPIType & { id: string }\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n};\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            };\r\n        case 'chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n};\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages));\r\n        };\r\n    }\r\n    return _newMessageHandler;\r\n};\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status));\r\n        };\r\n    }\r\n    return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start();\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch));\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch));\r\n\r\n};\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch));\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch));\r\n    chatAPI.stop();\r\n};\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message);\r\n};\r\n\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pnf\":\"Page404_pnf__2Eyfn\",\"pnf_error\":\"Page404_pnf_error__2ze6w\",\"pnf_descr\":\"Page404_pnf_descr__2Gq2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forms_wrapper\":\"UserSearchForm_forms_wrapper__2zRq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__13K-j\",\"sc\":\"MyPosts_sc__pdss9\",\"text\":\"MyPosts_text__2Z1Ek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Header_loginBlock__KeVwk\"};","import React from 'react';\r\nimport st from './FormControls.module.css';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\nimport {FieldValidatorType} from '../../utils/validators/validators';\r\n\r\ntype FormControlParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n\r\n}\r\n\r\n\r\nconst FormControl: React.FC<FormControlParamsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    // <div className={`${st.formControl} ${st.error}`}>\r\n    return <div className={st.formControl + ' ' + (hasError ? st.error : '')}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n\r\n    </div>;\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>;\r\n};\r\n\r\n\r\nexport const MyInput: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>;\r\n};\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = '') {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props}\r\n        /> {text}\r\n    </div>;\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"preLoader_loader__3UrSS\",\"l_main\":\"preLoader_l_main__1UOsA\",\"l_square\":\"preLoader_l_square__Ver3r\",\"animsquare1\":\"preLoader_animsquare1__3KInR\",\"animsquare2\":\"preLoader_animsquare2__qpmwH\",\"animsquare3\":\"preLoader_animsquare3__3DOUz\",\"animsquare4\":\"preLoader_animsquare4__1Bb2F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileData_description__lzpey\",\"thisPhoto\":\"ProfileData_thisPhoto__1BWkz\",\"thisLogo\":\"ProfileData_thisLogo__1JBM-\",\"thisAva\":\"ProfileData_thisAva__2MPvm\"};"],"sourceRoot":""}