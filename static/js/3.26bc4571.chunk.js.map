{"version":3,"sources":["SN-2-features/f3-dialogs/d1-ui/Dialogs.module.css","utils/validators/validators.ts","SN-2-features/f3-dialogs/d1-ui/Message/Message.tsx","SN-2-features/f3-dialogs/d1-ui/DialogItem/DialogItem.tsx","SN-2-features/f3-dialogs/d2-bll/dialogs-selectors.ts","SN-2-features/f3-dialogs/d1-ui/Dialogs.tsx"],"names":["module","exports","maxLength","Message","message","className","st","DialogItem","id","name","path","dialog","to","required","value","undefined","getDialogsPage","state","dialogsPage","maxLength50","length","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","createField","Textarea","withAuthRedirect","dispatch","useDispatch","dialogsPag","useSelector","dialogsElements","dialogsData","map","d","messageElements","messageData","m","dialogsWrapper","dialogs","messages","values","dialogsActions","sendMessage","newMessageBody"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6CCItLC,E,iCCQlBC,EAPsB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnC,OACI,qBAAKC,UAAWC,IAAGF,QAAnB,SAA6BA,K,QCWtBG,EAXyB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAEpCC,EAAO,aAAeF,EAC5B,OACI,qBAAKH,UAAWC,IAAGK,OAAnB,SACI,cAAC,IAAD,CAASC,GAAIF,EAAb,SAAoBD,O,iBFbnBI,EAA+B,SAACC,GACzC,OAAOA,OAAQC,EAAY,qBGElBC,EAAiB,SAACC,GAC3B,OAAOA,EAAMC,a,0BCWXC,GJV2BjB,EIUI,GJVqC,SAACY,GACvE,OAAOA,GAASA,EAAMM,OAASlB,EAAxB,uBAAoDA,EAApD,iBAA0Ea,IIwD/EM,EAAsBC,YAAoC,CAACC,KAAM,2BAA3CD,EAdyE,SACjGE,GACA,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,iBAAkB,CAACd,EAAUM,GAAcS,OAEhH,8BACI,kDAQDC,uBA/CuB,WAElC,IAAMC,EAAWC,cACXC,EAAaC,YAAYjB,GAGzBkB,EAAkBF,EAAWG,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY5B,KAAM4B,EAAE5B,KACRD,GAAI6B,EAAE7B,IACD6B,EAAE7B,OAErE8B,EAAkBN,EAAWO,YAAYH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASpC,QAASoC,EAAEpC,SAENoC,EAAEhC,OAMxE,OACI,sBAAKH,UAAWC,IAAGmC,eAAnB,UACI,qBAAKpC,UAAWC,IAAGoC,QAAnB,SACKR,IAEL,sBAAK7B,UAAWC,IAAGqC,SAAnB,UACKL,EADL,OAEA,cAACjB,EAAD,CAAqBI,SAXF,SAACmB,GACxBd,EAASe,IAAeC,YAAYF,EAAOG","file":"static/js/3.26bc4571.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__2zrv6\",\"dialogs\":\"Dialogs_dialogs__1rWRg\",\"dialog\":\"Dialogs_dialog__Ixc8G\",\"active\":\"Dialogs_active__2qzYJ\",\"messages\":\"Dialogs_messages__3efnO\",\"message\":\"Dialogs_message__3nVHe\"};","export const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number):FieldValidatorType => (value) => {\r\n    return value && value.length > maxLength ? `Must be less ${maxLength} symbols` : undefined;\r\n};\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n","import React from 'react';\r\nimport st from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\nconst Message: React.FC<PropsType> = ({message}) => {\r\n    return (\r\n        <div className={st.message}>{message}</div>\r\n    );\r\n};\r\n\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport st from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    name: string\r\n}\r\nconst DialogItem: React.FC<PropsType> = ({id, name}) => {\r\n\r\n    const path = '/dialogs/1' + id;\r\n    return (\r\n        <div className={st.dialog}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default DialogItem;\r\n","import {InitialStateDialogsType} from './dialogs-reducer';\r\nimport {AppRootStateType} from '../../../SN-1-main/m2-bll/redux-store';\r\n\r\nexport const getDialogsPage = (state: AppRootStateType): InitialStateDialogsType => {\r\n    return state.dialogsPage\r\n};\r\n","import React from 'react';\r\nimport st from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {getDialogsPage} from '../d2-bll/dialogs-selectors';\r\nimport {dialogsActions} from '../d2-bll/dialogs-reducer';\r\nimport {createField, Textarea} from '../../../SN-3-common/FormControls/FormControls';\r\nimport {withAuthRedirect} from '../../../HOC/WithAuthRedirect';\r\n\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst Dialogs: React.FC<PropsDType> = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const dialogsPag = useSelector(getDialogsPage)\r\n\r\n\r\n    const dialogsElements = dialogsPag.dialogsData.map(d => <DialogItem name={d.name}\r\n                                                                        id={d.id}\r\n                                                                        key={d.id}/>);\r\n\r\n    const messageElements = dialogsPag.messageData.map(m => <Message message={m.message}\r\n\r\n                                                                     key={m.id}/>);\r\n\r\n    const onNewMessageChange = (values: NewMessageFormValuesType) => {\r\n        dispatch(dialogsActions.sendMessage(values.newMessageBody))\r\n    };\r\n\r\n    return (\r\n        <div className={st.dialogsWrapper}>\r\n            <div className={st.dialogs}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={st.messages}>\r\n                {messageElements} </div>\r\n            <AddMessageFormRedux onSubmit={onNewMessageChange}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (\r\n    props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\nexport default withAuthRedirect(Dialogs)\r\n\r\n\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\ntype PropsDType = {}"],"sourceRoot":""}