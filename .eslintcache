[{"C:\\itless\\pathofsamurai\\src\\index.tsx":"1","C:\\itless\\pathofsamurai\\src\\App.tsx":"2","C:\\itless\\pathofsamurai\\src\\Rdux\\app-reducer.tsx":"3","C:\\itless\\pathofsamurai\\src\\Rdux\\redux-store.tsx":"4","C:\\itless\\pathofsamurai\\src\\HOC\\withSuspense.tsx":"5","C:\\itless\\pathofsamurai\\src\\components\\News\\News.tsx":"6","C:\\itless\\pathofsamurai\\src\\components\\Nav\\Nav.tsx":"7","C:\\itless\\pathofsamurai\\src\\components\\Settings\\Settings.tsx":"8","C:\\itless\\pathofsamurai\\src\\components\\Music\\Music.tsx":"9","C:\\itless\\pathofsamurai\\src\\components\\Header\\HeaderContainer.tsx":"10","C:\\itless\\pathofsamurai\\src\\components\\Users\\UsersContainer.tsx":"11","C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileContentContainerAPI.tsx":"12","C:\\itless\\pathofsamurai\\src\\components\\Login\\Login.tsx":"13","C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\DialogsContainer.tsx":"14","C:\\itless\\pathofsamurai\\src\\Rdux\\profile-reducer.tsx":"15","C:\\itless\\pathofsamurai\\src\\Rdux\\auth-reducer.tsx":"16","C:\\itless\\pathofsamurai\\src\\Rdux\\dialogs-reducer.tsx":"17","C:\\itless\\pathofsamurai\\src\\Rdux\\sidebar-reducer.tsx":"18","C:\\itless\\pathofsamurai\\src\\Rdux\\users-reducer.tsx":"19","C:\\itless\\pathofsamurai\\src\\Rdux\\users-selectors.tsx":"20","C:\\itless\\pathofsamurai\\src\\components\\Users\\UsersAPIComponent.tsx":"21","C:\\itless\\pathofsamurai\\src\\components\\Header\\Header.tsx":"22","C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileContent.tsx":"23","C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\Dialogs.tsx":"24","C:\\itless\\pathofsamurai\\src\\components\\Login\\LoginForm.tsx":"25","C:\\itless\\pathofsamurai\\src\\HOC\\WithAuthRedirect.tsx":"26","C:\\itless\\pathofsamurai\\src\\components\\Login\\reduxFormLogin\\ReduxLogin.tsx":"27","C:\\itless\\pathofsamurai\\src\\API\\profile-api.ts":"28","C:\\itless\\pathofsamurai\\src\\API\\api-types.ts":"29","C:\\itless\\pathofsamurai\\src\\API\\auth-api.ts":"30","C:\\itless\\pathofsamurai\\src\\API\\security-api.ts":"31","C:\\itless\\pathofsamurai\\src\\components\\Users\\Users.tsx":"32","C:\\itless\\pathofsamurai\\src\\utils\\validators\\validators.ts":"33","C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"34","C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"35","C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\Message\\Message.tsx":"36","C:\\itless\\pathofsamurai\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"37","C:\\itless\\pathofsamurai\\src\\components\\Login\\reduxFormLogin\\ReduxFormLogin.tsx":"38","C:\\itless\\pathofsamurai\\src\\components\\common\\FormControls\\FormControls.tsx":"39","C:\\itless\\pathofsamurai\\src\\API\\instance-api.ts":"40","C:\\itless\\pathofsamurai\\src\\components\\common\\Paginator\\Paginator.tsx":"41","C:\\itless\\pathofsamurai\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"42","C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileData\\ProfileData.tsx":"43","C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm\\ProfileDataForm.tsx":"44","C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileStatus\\ProfileStatusHooks.tsx":"45","C:\\itless\\pathofsamurai\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"46","C:\\itless\\pathofsamurai\\src\\utils\\object-helpers\\object-helpers.tsx":"47","C:\\itless\\pathofsamurai\\src\\API\\users-api.ts":"48","C:\\itless\\pathofsamurai\\src\\components\\common\\preLoader\\preLoader.tsx":"49","C:\\itless\\pathofsamurai\\src\\components\\Users\\User\\UserSearchForm.tsx":"50","C:\\itless\\pathofsamurai\\src\\components\\Users\\User\\User.tsx":"51"},{"size":602,"mtime":1609605921671,"results":"52","hashOfConfig":"53"},{"size":3644,"mtime":1609763639210,"results":"54","hashOfConfig":"53"},{"size":1087,"mtime":1609605921643,"results":"55","hashOfConfig":"53"},{"size":1031,"mtime":1609694589212,"results":"56","hashOfConfig":"53"},{"size":274,"mtime":1609605921643,"results":"57","hashOfConfig":"53"},{"size":159,"mtime":1601129789295,"results":"58","hashOfConfig":"53"},{"size":1127,"mtime":1601129789294,"results":"59","hashOfConfig":"53"},{"size":147,"mtime":1601129789300,"results":"60","hashOfConfig":"53"},{"size":143,"mtime":1601129789293,"results":"61","hashOfConfig":"53"},{"size":1058,"mtime":1609605921652,"results":"62","hashOfConfig":"53"},{"size":1567,"mtime":1609774471148,"results":"63","hashOfConfig":"53"},{"size":3245,"mtime":1609605921659,"results":"64","hashOfConfig":"53"},{"size":219,"mtime":1609605921653,"results":"65","hashOfConfig":"53"},{"size":821,"mtime":1609605921651,"results":"66","hashOfConfig":"53"},{"size":4829,"mtime":1609768831098,"results":"67","hashOfConfig":"53"},{"size":3577,"mtime":1609768716730,"results":"68","hashOfConfig":"53"},{"size":1414,"mtime":1609605921644,"results":"69","hashOfConfig":"53"},{"size":157,"mtime":1601129789288,"results":"70","hashOfConfig":"53"},{"size":5212,"mtime":1609773779492,"results":"71","hashOfConfig":"53"},{"size":962,"mtime":1609776581395,"results":"72","hashOfConfig":"53"},{"size":1845,"mtime":1609774669460,"results":"73","hashOfConfig":"53"},{"size":828,"mtime":1609605921652,"results":"74","hashOfConfig":"53"},{"size":931,"mtime":1609605921658,"results":"75","hashOfConfig":"53"},{"size":2380,"mtime":1609605921650,"results":"76","hashOfConfig":"53"},{"size":4695,"mtime":1609776936370,"results":"77","hashOfConfig":"53"},{"size":873,"mtime":1609605921642,"results":"78","hashOfConfig":"53"},{"size":319,"mtime":1609605921655,"results":"79","hashOfConfig":"53"},{"size":1179,"mtime":1609605921639,"results":"80","hashOfConfig":"53"},{"size":590,"mtime":1609605921632,"results":"81","hashOfConfig":"53"},{"size":707,"mtime":1609605921633,"results":"82","hashOfConfig":"53"},{"size":185,"mtime":1609605921639,"results":"83","hashOfConfig":"53"},{"size":1829,"mtime":1609774326502,"results":"84","hashOfConfig":"53"},{"size":382,"mtime":1609605921672,"results":"85","hashOfConfig":"53"},{"size":2110,"mtime":1609763639222,"results":"86","hashOfConfig":"53"},{"size":431,"mtime":1609605921649,"results":"87","hashOfConfig":"53"},{"size":280,"mtime":1609605921651,"results":"88","hashOfConfig":"53"},{"size":574,"mtime":1609605921656,"results":"89","hashOfConfig":"53"},{"size":1568,"mtime":1609605921654,"results":"90","hashOfConfig":"53"},{"size":1834,"mtime":1609605921669,"results":"91","hashOfConfig":"53"},{"size":248,"mtime":1609605921633,"results":"92","hashOfConfig":"53"},{"size":1840,"mtime":1609767821824,"results":"93","hashOfConfig":"53"},{"size":2559,"mtime":1609605921655,"results":"94","hashOfConfig":"53"},{"size":1568,"mtime":1609605921660,"results":"95","hashOfConfig":"53"},{"size":2148,"mtime":1609605921661,"results":"96","hashOfConfig":"53"},{"size":1184,"mtime":1609605921663,"results":"97","hashOfConfig":"53"},{"size":1423,"mtime":1609605921657,"results":"98","hashOfConfig":"53"},{"size":262,"mtime":1609605921672,"results":"99","hashOfConfig":"53"},{"size":863,"mtime":1609773876367,"results":"100","hashOfConfig":"53"},{"size":657,"mtime":1609763941371,"results":"101","hashOfConfig":"53"},{"size":2091,"mtime":1609776993240,"results":"102","hashOfConfig":"53"},{"size":2325,"mtime":1609767821833,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"1yucu63",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"106"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"106"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"106"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"106"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"C:\\itless\\pathofsamurai\\src\\index.tsx",[],["213","214"],"C:\\itless\\pathofsamurai\\src\\App.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\app-reducer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\redux-store.tsx",[],"C:\\itless\\pathofsamurai\\src\\HOC\\withSuspense.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\News\\News.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Nav\\Nav.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Settings\\Settings.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Music\\Music.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Header\\HeaderContainer.tsx",["215","216"],"import React from 'react';\r\nimport Header, {DispatchHeaderPropsType, HeaderPropsType} from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {logoutTC} from '../../Rdux/auth-reducer';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {AppRootStateType} from '../../Rdux/redux-store';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype PathParamsType = {\r\n    id: string,\r\n    email: string,\r\n    login: string\r\n}\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType & DispatchHeaderPropsType> {\r\n    render() {\r\n        return <Header {...this.props}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => (\r\n    {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    });\r\n\r\n// export default withRouter(connector(HeaderContainer));\r\nexport default compose<React.ComponentType>(\r\n    connect<HeaderPropsType, DispatchHeaderPropsType, {}, AppRootStateType>(mapStateToProps, {logoutTC}),\r\n    withRouter,\r\n)(HeaderContainer);\r\n","C:\\itless\\pathofsamurai\\src\\components\\Users\\UsersContainer.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileContentContainerAPI.tsx",["217","218"],"import React from 'react';\r\nimport '../../App.module.css';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getUserProfileTC,\r\n    getUserStatusTC,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatusTC\r\n} from '../../Rdux/profile-reducer';\r\nimport Profile from './ProfileContent';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {AppRootStateType} from '../../Rdux/redux-store';\r\nimport {ReduxLogin} from '../Login/reduxFormLogin/ReduxLogin';\r\nimport {NewProfileType} from '../../Types/Types';\r\n\r\n\r\n// export type MapStatePropsType = {\r\n//     profile: NewProfileType | null\r\n//     status: string\r\n//     isAuth: boolean\r\n//     authorizedUserId: number | null\r\n//\r\n// }\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfileTC: (userId: number | null) => void\r\n    getUserStatusTC: (userId: number | null) => void\r\n    updateUserStatusTC: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: NewProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContentContainerAPI extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error('ID should exists in URI params or in state (\\'authorizedUserId\\')');\r\n        } else {\r\n            this.props.getUserProfileTC(userId);\r\n            this.props.getUserStatusTC(userId);\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{margin: '5px', border: '1px solid white', backgroundColor: 'yellow'}}>\r\n                    <ReduxLogin/>\r\n                </div>\r\n\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    {...this.props} profile={this.props.profile} status={this.props.status}\r\n                    updateStatus={this.props.updateUserStatusTC}\r\n                />\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId,\r\n\r\n\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getUserStatusTC, updateUserStatusTC, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContentContainerAPI);\r\n\r\n\r\n","C:\\itless\\pathofsamurai\\src\\components\\Login\\Login.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\profile-reducer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\auth-reducer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\dialogs-reducer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\sidebar-reducer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\users-reducer.tsx",[],"C:\\itless\\pathofsamurai\\src\\Rdux\\users-selectors.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Users\\UsersAPIComponent.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Header\\Header.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileContent.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\Dialogs.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Login\\LoginForm.tsx",["219","220"],"import React from 'react';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from '../../Rdux/auth-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../../Rdux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {LoginParamsType} from '../../API/api-types';\r\n\r\n// TODO сделать проверку правильности пароля\r\n\r\ntype LoginFormType = {\r\n    loginTC: (data: LoginParamsType) => Promise<any>\r\n    isCorrect: boolean\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<LoginFormType> = ({isAuth, isCorrect, loginTC,captchaUrl}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            isCorrect: isCorrect,\r\n            confirm: ''\r\n        }, validate(values: FormikType) {\r\n            const errors: FormikType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 5) {\r\n                errors.password = 'Must be 5 characters or more';\r\n            }\r\n            if (!values.isCorrect) {\r\n                errors.confirm = 'Incorrect email or password';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: async (values) => {\r\n           await loginTC(values);\r\n\r\n        },\r\n    });\r\n    // useEffect(() => {\r\n    //     !isCorrect && formik.setErrors({confirm: 'Incorrect email or password'});\r\n    // }, [isCorrect]);\r\n    debugger\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>;\r\n    }\r\n    //TODO доделать отправку капчи\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />{\r\n                        formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null\r\n                    }\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />{\r\n                        formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null\r\n                    }\r\n\r\n                        {\r\n                            formik.errors.confirm ? <div style={{color: 'red'}}>{formik.errors.confirm}</div> : null\r\n                        }\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    </form>;\r\n\r\n\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    isCorrect: state.auth.isCorrect,\r\n    captchaUrl: state.auth.captchaUrl\r\n\r\n});\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    isCorrect: boolean\r\n    captchaUrl: string | null\r\n\r\n}\r\ntype FormikType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    isCorrect?: boolean\r\n    confirm?: string\r\n}\r\nexport default connect(mapStateToProps, {loginTC})(LoginForm);\r\n","C:\\itless\\pathofsamurai\\src\\HOC\\WithAuthRedirect.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Login\\reduxFormLogin\\ReduxLogin.tsx",[],"C:\\itless\\pathofsamurai\\src\\API\\profile-api.ts",[],"C:\\itless\\pathofsamurai\\src\\API\\api-types.ts",[],"C:\\itless\\pathofsamurai\\src\\API\\auth-api.ts",[],"C:\\itless\\pathofsamurai\\src\\API\\security-api.ts",[],"C:\\itless\\pathofsamurai\\src\\components\\Users\\Users.tsx",[],"C:\\itless\\pathofsamurai\\src\\utils\\validators\\validators.ts",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Dialogs\\Message\\Message.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Login\\reduxFormLogin\\ReduxFormLogin.tsx",["221"],"import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../Rdux/redux-store';\r\nimport {required} from '../../../utils/validators/validators';\r\nimport {createField, MyInput} from '../../common/FormControls/FormControls';\r\n\r\n\r\nexport const ReduxLoginForm: React.FC<InjectedFormProps> = ({handleSubmit}) => {\r\n    const captchaUrl = useSelector<AppRootStateType, string | null>(state => state.auth.captchaUrl);\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={'input'} name={'login'} placeholder={'login'}/>\r\n            </div>\r\n            <div>\r\n                <Field component={'input'} name={'password'} placeholder={'password'}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\" name={'Remember me'} component={'input'}/> Remember me\r\n            </div>\r\n            <div>\r\n                <button>login</button>\r\n            </div>\r\n            <div>\r\n                {captchaUrl && <img src={captchaUrl}/>}\r\n                {captchaUrl && createField('Symbols from image ', 'captcha', [required], MyInput, {})}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\nexport type LoginReduxFormTypeKeys = keyof LoginFormValuesType\r\nexport const LoginReduxForm = reduxForm<InjectedFormProps, any>({form: 'login'})(ReduxLoginForm);\r\n\r\n\r\n\r\n","C:\\itless\\pathofsamurai\\src\\components\\common\\FormControls\\FormControls.tsx",[],"C:\\itless\\pathofsamurai\\src\\API\\instance-api.ts",[],"C:\\itless\\pathofsamurai\\src\\components\\common\\Paginator\\Paginator.tsx",["222"],"import React, {useState} from 'react';\r\nimport cn from 'classnames';\r\nimport st from './Paginator.module.css';\r\nimport {UserSearchForm} from \"../../Users/User/UserSearchForm\";\r\n\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    pageSize: number\r\n    portionSize?: number\r\n\r\n\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalUsersCount, pageSize, currentPage, onPageChanged}) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionSize = 10;\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(Math.floor(currentPage / 10) + 1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n\r\n        <div className={st.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1);\r\n            }}>Prev</button>}\r\n\r\n\r\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span className={cn({[st.selectedPage]: currentPage === p}, st.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>;\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1);\r\n            }\r\n            }>NEXT</button>}\r\n\r\n        </div>);\r\n};\r\n\r\n\r\nexport default Paginator;\r\n","C:\\itless\\pathofsamurai\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileData\\ProfileData.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm\\ProfileDataForm.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\ProfileInfo\\ProfileStatus\\ProfileStatusHooks.tsx",[],"C:\\itless\\pathofsamurai\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"C:\\itless\\pathofsamurai\\src\\utils\\object-helpers\\object-helpers.tsx",[],"C:\\itless\\pathofsamurai\\src\\API\\users-api.ts",[],"C:\\itless\\pathofsamurai\\src\\components\\common\\preLoader\\preLoader.tsx",["223","224","225"],"import {Field, Form, Formik} from 'formik';\r\nimport React from 'react';\r\nimport st from './preLoader.module.css';\r\n\r\n\r\nconst PreLoader: React.FC = () => {\r\n    return <div className={st.loader}>\r\n        <div className={st.l_main}>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n            <div className={st.l_square}><span></span><span></span><span></span></div>\r\n\r\n        </div>\r\n    </div>;\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport default PreLoader;\r\n","C:\\itless\\pathofsamurai\\src\\components\\Users\\User\\UserSearchForm.tsx",["226","227"],"C:\\itless\\pathofsamurai\\src\\components\\Users\\User\\User.tsx",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":10,"column":6,"nodeType":"234","messageId":"235","endLine":10,"endColumn":20},{"ruleId":"232","severity":1,"message":"236","line":15,"column":6,"nodeType":"234","messageId":"235","endLine":15,"endColumn":25},{"ruleId":"237","severity":1,"message":"238","line":44,"column":5,"nodeType":"239","messageId":"240","endLine":46,"endColumn":6},{"ruleId":"241","severity":1,"message":"242","line":72,"column":44,"nodeType":"243","messageId":"244","endLine":72,"endColumn":46},{"ruleId":"232","severity":1,"message":"245","line":30,"column":40,"nodeType":"234","messageId":"235","endLine":30,"endColumn":50},{"ruleId":"246","severity":1,"message":"247","line":78,"column":29,"nodeType":"248","endLine":79,"endColumn":50},{"ruleId":"249","severity":1,"message":"250","line":26,"column":32,"nodeType":"248","endLine":26,"endColumn":55},{"ruleId":"232","severity":1,"message":"251","line":4,"column":9,"nodeType":"234","messageId":"235","endLine":4,"endColumn":23},{"ruleId":"232","severity":1,"message":"252","line":1,"column":9,"nodeType":"234","messageId":"235","endLine":1,"endColumn":14},{"ruleId":"232","severity":1,"message":"253","line":1,"column":16,"nodeType":"234","messageId":"235","endLine":1,"endColumn":20},{"ruleId":"232","severity":1,"message":"254","line":1,"column":22,"nodeType":"234","messageId":"235","endLine":1,"endColumn":28},{"ruleId":"232","severity":1,"message":"255","line":3,"column":21,"nodeType":"234","messageId":"235","endLine":3,"endColumn":31},{"ruleId":"232","severity":1,"message":"256","line":5,"column":9,"nodeType":"234","messageId":"235","endLine":5,"endColumn":17},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],"@typescript-eslint/no-unused-vars","'PathParamsType' is defined but never used.","Identifier","unusedVar","'mapStateToPropsType' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'captchaUrl' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'UserSearchForm' is defined but never used.","'Field' is defined but never used.","'Form' is defined but never used.","'Formik' is defined but never used.","'getUsersTC' is defined but never used.","'getUsers' is defined but never used.","no-global-assign","no-unsafe-negation"]